openapi: 3.0.2
info:
  version: "${project.version}"
  title: "${project.name}"
  description: |
    Experimental service for finding similar images in collections.
  license:
    name: "${license.name}"
    url: "${license.url}"
servers:
  #  /api must match servlet-mapping in web.xml
  - url: "/${project.artifactId}/api"
    description: "Current server"
paths:

  # https://swagger.io/docs/specification/describing-request-body/file-upload/
  /similar:
    post:
      tags:
        - "${project.name}"
      summary: 'Request images similar to the uploaded image'
      operationId: findSimilarWhole
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  description: 'The image to use as source for the similarity search'
                  type: string
                  format: binary
                collection:
                  description: 'The collection to search for similar images.
                                If none is specified, the default collection will be used'
                  type: string
                sourceID:
                  description: 'Optional ID for the image, used for tracking & debugging'
                  type: string
                maxMatches:
                  description: 'The maximum number of similar images to return'
                  type: integer
                  default: 10

      responses:
        '200':
          description: 'An array of metadata for similar images, including URLs for the images'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimilarResponse'

  /collections:
    get:
      tags:
        - "${project.name}"
      summary: 'List the available collections'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /detect/subjects:
    post:
      tags:
        - "${project.name}"
      summary: 'Detect what the subject of the image, e.g. a picture with a cat on a couch should return "cat" and "couch"'
      operationId: detectSubjects
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  description: 'The image to use as source for subject detection'
                  type: string
                  format: binary
                method:
                  description: 'The method used for subject detection.
                                "Inception3" is Tensorflow Inception 3 trained on ImageNet data'
                  type: string
                  enum: [Inception3]
                  default: Inception3
                  example: Inception3
                sourceID:
                  description: 'Optional ID for the image, used for tracking & debugging'
                  type: string
                maxMatches:
                  description: 'The maximum number of detected subjects to return'
                  type: integer
                  default: 10

      responses:
        '200':
          description: 'The detected subjects together with the calculated confidence of correct detection'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'


  /detect/faces:
    post:
      tags:
        - "${project.name}"
      summary: 'Detect human faces in the uploaded image'
      operationId: detectFaces
      x-streamingOutput: true # If enabled the method will return StreamingOutput.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  description: 'The image to use as source for face detection'
                  type: string
                  format: binary
                method:
                  description: 'The method used for face detection'
                  type: string
                  enum: [HaarCascade]
                  default: HaarCascade
                  example: HaarCascade
                sourceID:
                  description: 'Optional ID for the image, used for tracking & debugging'
                  type: string
                response:
                  description: 'The response format'
                  type: string
                  enum: [json, jpeg]
                  default: json
                  example: json

      responses:
        '200':
          description: 'The detected faces either as a JSON structure with coordinates or the input image with overlays'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Box'
            image/jpeg:
              schema:
                type: string
                format: binary

  /resource/{collection}/{id}:
    get:
      tags:
        - "${project.name}"
      summary: 'Deliver a static resource (typically an image)'
      operationId: getResource
      x-streamingOutput: true
      parameters:
        - name: collection
          in: path
          description: 'The collection that the resource belongs to, e.g. "faces".'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: 'The ID of the resource, e.g. "image_34323.jpg".'
          required: true
          schema:
            type: string

      responses:
        '200':
          description: 'The requested resource'
          content:
            image/jpeg: # TODO: Giant hack for now. Figure out how to supply a custom Content-Type
              schema:
                type: string
                format: binary
        '400':
          description: 'Invalid Argument'
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 'File Not Found'
          content:
            text/plain:
              schema:
                type: string

  /ping:
    get:
      tags:
        - "${project.name}"
      summary: Ping the server to check if the server is reachable.
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Error
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:

    SimilarResponse:
      type: object
      required:
        - similarImage
      properties:
        sourceID:
          type: string
          description: 'The ID for the source image, if one was provided by the caller'
          example: 'TestImage2.jpg'
        sourceURL:
          type: string
          description: 'The URL for the source image, if the source was temporarily stored. Note: Even if an URL is present, the content might have expired at call time!'
          example: 'http://example.com/like-a-liik/api/resource/ephemeral/b1690f11-7646-43b2-9911-611c2b427f0e.jpg'
        distance:
          type: number
          format: double
          description: 'The similarity distance from 0 to 1. Lower is better. 0 is identical'
          example: 0.345
        url:
          type: string
          description: 'Deprecated in favor of .similarImage.mediumURL'
        similarImage:
          $ref: '#/components/schemas/Image'
        similarPerson:
          $ref: '#/components/schemas/Person'
        imageCreators:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: 'The one or more photographers responsible for the similar image'

    Person:
      type: object
      properties:
        firstName:
          type: string
          description: 'The first name of the person'
          example: 'Alfred'
        lastName:
          type: string
          description: 'The first name of the person'
          example: 'Lehmann'
        birthday:
          type: string
          description: 'The birthday of the person, stated as YYYY, YYYY-MM or YYYY-MM-DD'
          example: '1858'
        deathday:
          type: string
          description: 'The deathday of the person, stated as YYYY, YYYY-MM or YYYY-MM-DD'
          example: '1921'
        occupation:
          type: string
          description: 'The occupation of the person'
          example: 'psykolog'

    Image:
      type: object
      required:
        - previewURL
      properties:
        id:
          type: string
          description: 'The internal ID for the image'
          example: '0473151'
        microURL:
          type: string
          description: 'A direct link to a tight crop or very small scale instance of the image for use as icons or similar. JPEG or PNG is preferered'
          example: 'http://kb-images.kb.dk/DAMJP2%2FDAM%2FSamlingsbilleder%2FSamlingsbilleder%2Fsamlingsbilleder%2F1352%2F0473151/1100,900,1120,1500/200,/0/native.jpg'
        tinyURL:
          type: string
          description: 'A direct link to a crop or small scale instance of the image for display purposes. JPEG or PNG is preferered'
          example: 'http://kb-images.kb.dk/DAMJP2%2FDAM%2FSamlingsbilleder%2FSamlingsbilleder%2Fsamlingsbilleder%2F1352%2F0473151/850,700,1550,2200/200,/0/native.jpg'
        mediumURL:
          type: string
          description: 'A direct link to the image for display purposes. JPEG or PNG is preferered'
          example: 'http://kb-images.kb.dk/DAMJP2%2FDAM%2FSamlingsbilleder%2FSamlingsbilleder%2Fsamlingsbilleder%2F1352%2F0473151/full/400,/0/native.jpg'
        fullURL:
          type: string
          description: 'A direct link to a full size instance of the image. JPEG or PNG is preferered'
          example: 'http://kb-images.kb.dk/DAMJP2%2FDAM%2FSamlingsbilleder%2FSamlingsbilleder%2Fsamlingsbilleder%2F1352%2F0473151/full/full/0/native.jpg'
        rawURL:
          type: string
          description: 'A direct link to a raw, full size instance of the image. Images format in undefined, so TIFF / JPEG2000 / SVG are possible'
          example: 'http://kb-images.kb.dk/DAMJP2%2FDAM%2FSamlingsbilleder%2FSamlingsbilleder%2Fsamlingsbilleder%2F1352%2F0473151/full/full/0/native.tif'
        iiifURL:
          type: string
          description: 'The URL prefix for an IIIF conforming image server (see https://iiif.io/api/image/3.0/)'
          example: 'http://kb-images.kb.dk/DAMJP2%2FDAM%2FSamlingsbilleder%2FSamlingsbilleder%2Fsamlingsbilleder%2F1352%2F0473151/'
        creationDate:
          type: string
          description: 'The day that the image was created. Can be a single date or an interval. If single date, it is stated as YYYY, YYYY-MM or YYYY-MM-DD. If interval, it is stated as "YYYY to YYYY"'
          example: '1895-1907'
        dataURL:
          type: string
          description: 'A link to a resource (typically a webpage) with data about the similar image'
          example: 'http://www5.kb.dk/images/billed/2010/okt/billeder/object10530/da/'

    Box:
      type: object
      required:
        - faceID
        - x
        - y
        - width
        - height
      properties:
        sourceID:
          type: string
          description: 'The ID for the source image, if one was provided by the caller'
        faceID:
          type: integer
          description: 'The ID for the detected face. IDs start at 0 and are incremented by 1 for each found face'
        confidence:
          type: number
          format: float
          description: 'The confidence for correct face detection. Higher numbers are better'
        x:
          type: integer
          description: 'The x coordinate for the bounding box for the face'
        y:
          type: integer
          description: 'The y coordinate for the boundng box for the face. The top of the image is 0'
        width:
          type: integer
          description: 'The width of the bounding box for the face'
        height:
          type: integer
          description: 'The height of the bounding box for the face'

    Subject:
      type: object
      required:
        - subject
      properties:
        subject:
          type: string
          description: 'The detected subject in human readable form'
        sourceID:
          type: string
          description: 'The ID for the source image, if one was provided by the caller'
        confidence:
          type: number
          format: float
          description: 'The confidence for correct subject detection. Higher numbers are better'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
